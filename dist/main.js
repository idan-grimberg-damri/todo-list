/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/abstract-controller.js":
/*!************************************!*\
  !*** ./src/abstract-controller.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ AbstractController)\n/* harmony export */ });\nclass AbstractController{\n    \n    init(){throw new Error(\"Abstract method\");}\n    addProject(projectName){throw new Error(\"Abstract method\");}\n    removeProject(projectName){throw new Error(\"Abstract method\");}\n    sortProject(sortName){throw new Error(\"Abstract method\")};\n    addTodo(todoProperties){throw new Error(\"Abstract method\")};\n    updateTodo(id, properties){throw new Error(\"Abstract method\")};\n    removeTodo(id){{throw new Error(\"Abstract method\")};}\n    checkTodo(id){throw new Error(\"Abstract method\")};\n    removeCheckedTodos(){throw new Error(\"Abstract method\")};\n\n}\n\n\n\n//# sourceURL=webpack://todo-list/./src/abstract-controller.js?");

/***/ }),

/***/ "./src/abstract-publisher.js":
/*!***********************************!*\
  !*** ./src/abstract-publisher.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ AbstractPublisher)\n/* harmony export */ });\nclass AbstractPublisher{\n    publish(topic, data){throw new Error(\"Abstract method\")};\n}\n\n//# sourceURL=webpack://todo-list/./src/abstract-publisher.js?");

/***/ }),

/***/ "./src/abstract-subscriber.js":
/*!************************************!*\
  !*** ./src/abstract-subscriber.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ AbstractSubscriber)\n/* harmony export */ });\nclass AbstractSubscriber{\n    subscribe(topic, callback){throw new Error(\"Abstract method\");}\n    unsubscribe(topic, callback){throw new Error(\"Abstract method\");}\n}\n\n//# sourceURL=webpack://todo-list/./src/abstract-subscriber.js?");

/***/ }),

/***/ "./src/abstract-todo-model.js":
/*!************************************!*\
  !*** ./src/abstract-todo-model.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ AbstractTodoModel)\n/* harmony export */ });\n/* harmony import */ var _abstract_publisher_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract-publisher.js */ \"./src/abstract-publisher.js\");\n\n\nclass AbstractTodoModel extends _abstract_publisher_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    init(){throw new Error(\"Abstract method\");}\n    addProject(projectName){throw new Error(\"Abstract method\");}\n    removeProject(projectName){throw new Error(\"Abstract method\");}\n    sortProject(sortName){throw new Error(\"Abstract method\")};\n    addTodo(todo, project){throw new Error(\"Abstract method\")};\n    removeTodo(id){throw new Error(\"Abstract method\")};\n    updateTodo(id, properties){throw new Error(\"Abstract method\")};\n    checkTodo(id){throw new Error(\"Abstract method\")};\n    \n}\n\n\n\n//# sourceURL=webpack://todo-list/./src/abstract-todo-model.js?");

/***/ }),

/***/ "./src/compare-behavior.js":
/*!*********************************!*\
  !*** ./src/compare-behavior.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ CompareBehavior)\n/* harmony export */ });\n/**\n * Represents a compare behavior for comparing two elements  \n */\nclass CompareBehavior {\n    // String name that represents the compare behavior\n    #name\n\n    constructor(name){\n        this.#name = name;\n    }\n    /**\n     * \n     * @param {Object} todo1 \n     * @param {Object} todo2 \n     * @returns (In the context of a sorted data structure)\n     *  A value smaller than 0 if element1's position should be before element2.\n        Else returns a value greater than 0 if element1's position should be after element2.\n        Else returns 0 if the position of the two elements with respect to each other doesn't matter. \n     */\n    compare(element1, element2){throw new Error(\"Abstract Method\");}\n\n    get name() {\n        return this.#name;\n    }\n    set name(other) {\n        this.#name = other;\n    }\n}\n\n//# sourceURL=webpack://todo-list/./src/compare-behavior.js?");

/***/ }),

/***/ "./src/compare-behaviors.js":
/*!**********************************!*\
  !*** ./src/compare-behaviors.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CompareByDate\": () => (/* binding */ CompareByDate),\n/* harmony export */   \"CompareByPriority\": () => (/* binding */ CompareByPriority)\n/* harmony export */ });\n/* harmony import */ var _compare_behavior_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./compare-behavior.js */ \"./src/compare-behavior.js\");\n\n\n\nclass CompareByDate extends _compare_behavior_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n\n    constructor() {\n        super(\"Date\");\n\n    }\n\n    /**\n     * \n     * @param {*} todo1 \n     * @param {*} todo2 \n     * @returns (In the context of a sorted data structure)\n     *  A value smaller than 0 if todo1's position should be before todo2.\n        Else returns a value greater than 0 if todo1's position should be after todo2.\n        Else returns 0 if the position of the two todos with respect to each other doesn't matter. \n     */\n    compare(todo1, todo2) {\n        /* If an argument is not an instance of Date then he should come after the other argument\n           in a sorted data structure */\n        if (!(todo1.dueDate instanceof Date)) {\n            return 1;\n        }\n        if (!(todo2.dueDate instanceof Date)) {\n            return -1;\n        }\n\n        return todo1.dueDate - todo2.dueDate;\n    }\n\n}\n\nclass CompareByPriority extends _compare_behavior_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n\n    #compareByDate\n\n    constructor() {\n        super(\"Priority\");\n        this.#compareByDate = new CompareByDate();\n    }\n\n    compare(todo1, todo2) {\n       // If the priorities are identical then compare based on the Date value of the two todos. \n        if (todo1.priority === todo2.priority) {\n            return this.#compareByDate.compare(todo1, todo2)\n        }\n        // Higher priorities todos should come first \n        return todo2 - todo1;\n    }\n\n}\n\n\n\n//# sourceURL=webpack://todo-list/./src/compare-behaviors.js?");

/***/ }),

/***/ "./src/date-manager.js":
/*!*****************************!*\
  !*** ./src/date-manager.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _date_range_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./date-range.js */ \"./src/date-range.js\");\n\n/**\n * Take care of dates operations\n */\nclass DateManager {\n\n    #today\n\n    static get noDateValue() {\n        return \"No date\";\n    }\n\n    constructor() {\n        this.#today = new Date();\n        // Not interested with time\n        this.#today.setHours(0, 0, 0, 0);\n    }\n    /**\n     * \n     * @param {Date} date \n     * @returns True if date is today's date, false otherwise.\n     */\n    isTodayDate(date) {\n        if (!(date instanceof Date)) {\n            throw new Error(\"Argument must be an instance of Date\");\n        }\n\n        return this.#today.getTime() === date.getTime();\n    }\n    /**\n     * \n     * @returns Today's date.\n     */\n    getTodayDate() {\n\n        return this.#today;\n    }\n\n    /**\n     * \n     * @param {Object} options Triplet of the form {years:y, months:m, days:d}, such that y,m,d are non-negative integers. \n     * @returns A Date in the feature.\n     */\n    getFutureDate(options) {\n        return new Date(this.#today.getFullYear() + options.years, this.#today.getMonth() + options.months,\n            this.#today.getDate() + options.days, 0, 0, 0, 0);\n    }\n\n    toDateString(date) {\n        if (date instanceof Date) {\n            return date.toLocaleDateString();\n        }\n        return DateManager.noDateValue;\n    }\n\n    equals(d1, d2) {\n        return d1.getTime() === d2.getTime();\n    }\n\n    toInputDateFormat(date) {\n        if (date instanceof Date) {\n            let dateParts = [1 + date.getMonth() + \"\", date.getDate() + \"\"];\n\n            dateParts.forEach((datePart, index, dateParts) => {\n                if (dateParts[index].length < 2) {\n                    dateParts[index] = \"0\" + datePart;\n                }\n            });\n\n            return [date.getFullYear(), ...dateParts].join(\"-\");\n        }\n        return date;\n    }\n\n    getProperTodoDate(date) {\n        if (!(date instanceof Date)){\n            date = new Date(date);\n            if (isNaN(date.getTime())){\n                return DateManager.noDateValue;\n            }\n        }\n        if (isNaN(date.getTime()) ||\n            (Math.trunc(date.getFullYear() / 1000)) !== (Math.trunc(this.#today.getFullYear() / 1000)) ||\n            date < this.#today) {\n            return DateManager.noDateValue;\n        }\n\n        return date;\n\n    }\n\n    resetHours(date) {\n        if (date instanceof Date) {\n            date.setHours(0, 0, 0, 0);\n        }\n\n        return date;\n    }\n}\n\nlet instance = new DateManager();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (instance);\n\n//# sourceURL=webpack://todo-list/./src/date-manager.js?");

/***/ }),

/***/ "./src/date-range.js":
/*!***************************!*\
  !*** ./src/date-range.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ DateRange)\n/* harmony export */ });\n/* harmony import */ var _range_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./range.js */ \"./src/range.js\");\n\n/**\n * Represents a range of Dates without time\n */\nclass DateRange extends _range_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n\n    constructor(from, to) {\n        super(from, to);\n        this.#validateRange(from, to);\n    }\n    /**\n     * @inheritdoc\n     * @override\n     * @param {Date} date \n     */\n    includes(date) {\n        if (!(date instanceof Date)) {\n            throw new Error(\"Argument must be an instance of Date\");\n        }\n\n        return super.includes(date);\n    }\n\n    /**\n     * @inheritdoc\n     * @override\n     * @param {Date} from\n     * @param {Date} to\n     */\n    #validateRange(from, to) {\n        if (!(from instanceof Date && to instanceof Date)) {\n            throw new Error(\"The date range sides must be an instance of Date\");\n        }\n    }\n\n    /**\n     * @override\n     */\n    toString() {\n        return `DateRange: ${super.toString()}`;\n\n    }\n\n}\n\n\n\n//# sourceURL=webpack://todo-list/./src/date-range.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _todo_controller_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./todo-controller.js */ \"./src/todo-controller.js\");\n/* harmony import */ var _todo_model_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./todo-model.js */ \"./src/todo-model.js\");\n\n\n\nnew _todo_controller_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](new _todo_model_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]());\n\n\n\n//# sourceURL=webpack://todo-list/./src/index.js?");

/***/ }),

/***/ "./src/next-seven-days-project.js":
/*!****************************************!*\
  !*** ./src/next-seven-days-project.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ NextSevenDaysProject)\n/* harmony export */ });\n/* harmony import */ var _ranged_todo_project_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ranged-todo-project.js */ \"./src/ranged-todo-project.js\");\n/* harmony import */ var _date_manager_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./date-manager.js */ \"./src/date-manager.js\");\n\n\n\n/**\n * A project that contains todos with a date from the next seven days.\n */\nclass NextSevenDaysProject extends _ranged_todo_project_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n\n    constructor() {\n        // Tomorrow.\n        let from = _date_manager_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getFutureDate({ years: 0, months: 0, days: 1 });\n        // Eight days from today.\n        let to = _date_manager_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getFutureDate({ years: 0, months: 0, days: 8 });\n        super(\"Next 7 days\", from, to );\n\n    }\n}\n\n//# sourceURL=webpack://todo-list/./src/next-seven-days-project.js?");

/***/ }),

/***/ "./src/pubsub.js":
/*!***********************!*\
  !*** ./src/pubsub.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * Shychronous Publicsher-subscriber\n */\nclass PubSub {\n    #topicMap;\n\n    constructor() {\n        this.#topicMap = new Map();\n    }\n    /**\n     * Notify subscribers for data arrival for a specific topic \n     * @param {String} topic Topic name\n     * @param {Object} data Relevant data for subscribers to use\n     */\n    publish(topic, data) {\n        if (this.#topicMap.has(topic)) {\n            this.#topicMap.get(topic).forEach(callback => {\n                callback(data);\n            });\n            \n        }\n        else {\n            this.addTopic(topic);\n        }\n    }\n    /**\n     * Subscribe to a specific topic \n     * @param {String} topic \n     * @param {Function} callback \n     */\n    subscribe(topic, callback) {\n        if (!this.#topicMap.has(topic)) {\n            this.addTopic(topic);\n        }\n        this.#topicMap.get(topic).push(callback);\n    }\n    /**\n     * Unsubscribe from a specific topic\n     * @param {String} topic \n     * @param {Function} callback \n     */\n    unsubscribe(topic, callback) {\n        let callbacks = this.#topicMap.get(topic)?.filter((f) => f !== callback);\n        if (callbacks) {\n            this.#topicMap.set(topic, callbacks);\n        }\n    }\n    /**\n     * Add a new topic\n     * @param {String} topic \n     */\n    addTopic(topic) {\n        // If you call this method from this class then you will have a double check for the topic's existence.\n        // The check in this method is for the option to first add topic upront and then call the other methods.\n        if (!this.#topicMap.has(topic)) {\n            this.#topicMap.set(topic, []);\n\n        }\n    }\n}\n\n\nconst pubsub = new PubSub();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (pubsub);\n\n//# sourceURL=webpack://todo-list/./src/pubsub.js?");

/***/ }),

/***/ "./src/range.js":
/*!**********************!*\
  !*** ./src/range.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Range)\n/* harmony export */ });\nclass Range {\n\n    #from\n    #to\n\n    constructor(from, to) {\n        this.#validateRange(from, to);\n        this.#from = from;\n        this.#to = to;\n    }\n    /**\n     * \n     * @param {*} x \n     * @returns true if x belongs to [this.#from, this.#to], false otherwise\n     */\n    includes(x) {\n        return this.#from <= x && x <= this.#to;\n    }\n    /**\n     * @override\n     * \n     */\n    toString() {\n        return `(${this.#from},...,${this.#to})`;\n    }\n    get from() {\n        return this.#from;\n    }\n    set from(from) {\n        this.#validateRange(from, this.#to);\n        this.#from = from;\n    }\n    get to() {\n        return this.#to;\n    }\n    set to(to) {\n        this.#validateRange(this.#from, to);\n        this.#to = to;\n    }\n    #validateRange(from, to){\n        if(from > to){\n            throw new Error(`The start of the range can't be greater then the end: from=${from}, to=${to}`);\n        }\n        \n    }\n}\n\n//# sourceURL=webpack://todo-list/./src/range.js?");

/***/ }),

/***/ "./src/ranged-todo-project.js":
/*!************************************!*\
  !*** ./src/ranged-todo-project.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ RangedTodoProject)\n/* harmony export */ });\n/* harmony import */ var _date_range_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./date-range.js */ \"./src/date-range.js\");\n/* harmony import */ var _todo_project_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./todo-project.js */ \"./src/todo-project.js\");\n\n\n\n/**\n * A todo project with todos that belong to a specific range of dates.\n */\nclass RangedTodoProject extends _todo_project_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]{\n\n    #dateRange\n\n    constructor(name, from, to){\n        super(name);\n        this.#dateRange = new _date_range_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](from, to);    \n    }\n    /**\n     * Add to this project todos that belong to the range of dates that is represeted by dateRange\n     * @param {Array} projects \n     */\n    fillTodos(projects){\n        for (let project of projects){\n            for (let todo of project.todos){\n                if (this.#dateRange.includes(todo.dueDate)){\n                    this.add(todo);\n                }\n            }\n        }\n    }\n\n    get dateRange(){\n        return this.#dateRange;\n    }\n\n\n}\n\n//# sourceURL=webpack://todo-list/./src/ranged-todo-project.js?");

/***/ }),

/***/ "./src/today-project.js":
/*!******************************!*\
  !*** ./src/today-project.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TodayProject)\n/* harmony export */ });\n/* harmony import */ var _ranged_todo_project_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ranged-todo-project.js */ \"./src/ranged-todo-project.js\");\n/* harmony import */ var _date_manager_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./date-manager.js */ \"./src/date-manager.js\");\n\n\n\n/**\n * A project that contains todos with today's date.\n */\nclass TodayProject extends _ranged_todo_project_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n\n    constructor() {\n        // Today's date\n        let from = _date_manager_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getTodayDate(), to = from;\n        super(\"Today\", from, to );\n\n    }\n}\n\n//# sourceURL=webpack://todo-list/./src/today-project.js?");

/***/ }),

/***/ "./src/todo-controller.js":
/*!********************************!*\
  !*** ./src/todo-controller.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TodoController)\n/* harmony export */ });\n/* harmony import */ var _todo_view_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./todo-view.js */ \"./src/todo-view.js\");\n/* harmony import */ var _todo_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./todo.js */ \"./src/todo.js\");\n/* harmony import */ var _abstract_controller_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./abstract-controller.js */ \"./src/abstract-controller.js\");\n/* harmony import */ var _todo_storage_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./todo-storage.js */ \"./src/todo-storage.js\");\n/* harmony import */ var _todo_model_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./todo-model.js */ \"./src/todo-model.js\");\n\n\n\n\n\n\nclass TodoController extends _abstract_controller_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n    #todoView\n    #todoModel\n\n    constructor(model) {\n        super();\n        this.#todoModel = model.assign(_todo_storage_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getModelState());\n        this.#handleStorageSpecialProjects();\n        this.#todoView = new _todo_view_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this, model);\n        this.#todoView.subscribeAll();\n        this.#todoView.createView();\n        this.#todoView.populateProjects(this.#getProjectsNames());\n\n    }\n   \n    #handleStorageSpecialProjects(){\n        for(  let project of this.#todoModel.projects){\n            for (let todo of project.todos){\n                this.#todoModel.updateSpecialProjects(\"add\", todo.dueDate, todo);\n            }\n        }\n    }\n\n    addProject(projectName) {\n        this.#todoModel.addProject(projectName);\n        _todo_storage_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].setModelState(this.#todoModel);\n    }\n    removeProject(projectName) {\n        this.#todoModel.removeProject(projectName);\n        _todo_storage_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].setModelState(this.#todoModel);\n    }\n\n    sortProject(sortName) {\n        this.#todoModel.sortProject(sortName);\n        _todo_storage_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].setModelState(this.#todoModel);\n    }\n    addTodo(todoProperties) {\n        this.#todoModel.addTodo(new _todo_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](todoProperties.title, todoProperties.description,\n             todoProperties.priority, todoProperties.date));\n             \n        _todo_storage_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].setModelState(this.#todoModel);\n       \n    }\n\n    removeTodo(id){\n        this.#todoModel.removeTodo(id);\n        _todo_storage_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].setModelState(this.#todoModel);\n    }\n    \n    checkTodo(id){\n        this.#todoModel.checkTodo(id);\n        _todo_storage_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].setModelState(this.#todoModel);\n    }\n    \n    updateTodo(id, updatedTodo) {\n        this.#todoModel.updateTodo(id, updatedTodo);\n        _todo_storage_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].setModelState(this.#todoModel);\n    }\n    \n    removeCheckedTodos() {\n        this.#todoModel.getCheckedTodos()\n        .forEach(todo =>  this.#todoModel.removeTodo(todo.id));\n\n        _todo_storage_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].setModelState(this.#todoModel);\n    }\n    \n    changeCurrentProject(projectName){\n        this.#todoModel.changeCurrentProject(projectName);\n\n        _todo_storage_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].setModelState(this.#todoModel);\n    }\n    moveTodoToProject(id, projectName){\n       this.#todoModel.moveTodoToProject(id, projectName);\n       _todo_storage_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].setModelState(this.#todoModel);\n    }\n\n    getTodoProperties(id){\n        let todo = this.#todoModel.getTodoById(id);\n        if (todo){\n            return {title:todo.title, description:todo.description, date:todo.dueDate, priority: todo.priority};\n        }\n    }\n    \n    changeProjectName(projectName, updatedProjectName){\n        this.#todoModel.changeProjectName(projectName, updatedProjectName);\n        _todo_storage_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].setModelState(this.#todoModel);\n\n    }\n\n    #getProjectsNames(){\n    \n        return this.#todoModel.projects.map(project => project.name)\n        .slice(_todo_model_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].getSpecialProjectsLength());\n    }\n\n}\n\n//# sourceURL=webpack://todo-list/./src/todo-controller.js?");

/***/ }),

/***/ "./src/todo-model.js":
/*!***************************!*\
  !*** ./src/todo-model.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TodoModel)\n/* harmony export */ });\n/* harmony import */ var _abstract_todo_model_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract-todo-model.js */ \"./src/abstract-todo-model.js\");\n/* harmony import */ var _pubsub_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pubsub.js */ \"./src/pubsub.js\");\n/* harmony import */ var _todo_project_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./todo-project.js */ \"./src/todo-project.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ \"./src/utils.js\");\n/* harmony import */ var _today_project_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./today-project.js */ \"./src/today-project.js\");\n/* harmony import */ var _next_seven_days_project_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./next-seven-days-project.js */ \"./src/next-seven-days-project.js\");\n/* harmony import */ var _todo_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./todo.js */ \"./src/todo.js\");\n\n\n\n\n\n\n\n\n\nclass TodoModel extends _abstract_todo_model_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    #projects;\n    #currentProject;\n    static #specialProjects = { inbox: 0, today: 1, nextSevenDays: 2 };\n\n    constructor() {\n        super();\n        this.#projects = [];\n        this.#defineProjectsProperties();\n        this.#currentProject = this.#projects[TodoModel.#specialProjects.today];\n\n    }\n\n    assign(obj) {\n        if (obj) {\n            this.#projects[TodoModel.#specialProjects.inbox] = obj.inbox;\n            let i = TodoModel.getSpecialProjectsLength();\n            obj.projects.forEach((project) => {this.#projects[i++] = new _todo_project_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]().assign(project)});\n        }\n        \n        return this;\n    }\n\n\n    toJSON() {\n        return {\n            inbox: this.#projects[TodoModel.#specialProjects.inbox],\n            projects: this.#projects.slice(TodoModel.getSpecialProjectsLength()),\n            currentProject: this.#projects[TodoModel.#specialProjects.today]\n        }\n    }\n\n    addProject(projectName) {\n        // if we don't have a project with that name then add the project  \n        if (!this.getProjectByName(projectName)) {\n            let project = new _todo_project_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](projectName)\n            this.#projects.push(project);\n            this.publish(_utils_js__WEBPACK_IMPORTED_MODULE_3__.TOPICS.projectAdded, project);\n        }\n        // announce that we didn't add the project since a project with this name already exists\n        else {\n            this.publish(_utils_js__WEBPACK_IMPORTED_MODULE_3__.TOPICS.projectAdded, { errorMessage: `A project with the name ${projectName} is already exists` });\n        }\n\n    }\n\n    removeProject(projectName) {\n\n        let i = TodoModel.#specialProjects.nextSevenDays + 1;\n        while (i < this.#projects.length && this.#projects[i].name !== projectName) {\n            i++;\n        }\n\n        if (i < this.#projects.length) {\n            let [removedProject] = this.#projects.splice(i, 1);\n            if (removedProject === this.#currentProject) {\n                this.changeCurrentProject(\"Today\");\n            }\n            this.publish(_utils_js__WEBPACK_IMPORTED_MODULE_3__.TOPICS.projectRemoved, {\n                position: i - TodoModel.getSpecialProjectsLength(),\n                projectName\n            });\n        }\n\n    }\n\n    sortProject(sortName) {\n\n        if (this.#currentProject.sort(sortName)) {\n            this.publish(_utils_js__WEBPACK_IMPORTED_MODULE_3__.TOPICS.projectSorted, { sortName, todos: this.#currentProject.todos });\n        }\n    }\n\n    addTodo(todo, project = this.#currentProject) {\n        let position = project.add(todo);\n        let specialProject = this.updateSpecialProjects(\"add\", todo.dueDate, todo);\n        // If added a todo the the current project then publish only the todo and the todo's position\n        // If either condition is true then we added the todo to the current project. The first case \n        // The first condition is true when the project is a custom project.\n        // The second condition is true when we updated a todo from a special project and the date still holds\n        // for that project so first the todo will be added to the containing project and then to the \n        // current special project. \n        if (project === this.#currentProject || specialProject === this.#currentProject) {\n            this.publish(_utils_js__WEBPACK_IMPORTED_MODULE_3__.TOPICS.todoAdded, { todo, position });\n        }// Else we are adding the todo to another project (not to the currently displayed project in the view),\n        // so add this information to the publish data.\n        // A use case for this can be when we are updating (in the view) a todo in \"Today\" project and change the date\n        // to a date different then today's date, then this information can tell the view not to update\n        // the current project, that is actually today's project, since it will not be a valid date for this project. \n        else {\n            this.publish(_utils_js__WEBPACK_IMPORTED_MODULE_3__.TOPICS.todoAdded, { todo, position, isAddedToAnotherProject: true });\n        }\n\n    }\n    //TODO - you eed to publish the new length of the todos array and in the view\n    // implement the number of todos in a project in the nav \n    removeTodo(id) {\n        // data is of the form { todo, position }\n        let data = this.#currentProject.remove(id);\n        if (data) {\n            // If we removed the todo from a dpecial project like \"Today\" or \"Next 7 days\"\n            // then also ermove the todo from his containing project (that is a custom project);\n            if (this.isCurrentProjectSpecial()) {\n                data.todo.containingProject.remove(id);\n            }\n            // Else we removed the todo from a custom project\n            // so remove him also from a special project if he currently located in one.\n            else {\n                this.updateSpecialProjects(\"remove\", data.todo.dueDate, id);\n            }\n            // In either case publish the position of the removed todo from the current project\n            // and return the removed todo\n            this.publish(_utils_js__WEBPACK_IMPORTED_MODULE_3__.TOPICS.todoRemoved, data.position);\n            return data.todo;\n        }\n\n    }\n\n\n    checkTodo(id) {\n        let todo = this.#currentProject.getTodoById(id);\n        if (todo) {\n            todo.isChecked = !todo.isChecked;\n            // TODO handle change in today or sevedays project. publich there a special topic for this\n            this.publish(_utils_js__WEBPACK_IMPORTED_MODULE_3__.TOPICS.todoChecked, { todo })\n        }\n    }\n\n\n    updateTodo(id, updatedTodo) {\n        let removedTodo = this.removeTodo(id);\n        // If we removed the todo from any special project then add him to the original containing project,\n        // that is a custom project and not a special project.\n        if (this.isCurrentProjectSpecial()) {\n            this.addTodo(updatedTodo, removedTodo.containingProject);\n        }\n        // Else the current project is not a custom project so jsut add the todo the the current project\n        else {\n            this.addTodo(updatedTodo);\n        }\n\n    }\n\n    moveTodoToProject(id, projectName) {\n        let project = this.getProjectByName(projectName);\n        if (project) {\n            let todo = this.removeTodo(id);\n            if (todo) {\n                this.addTodo(todo, project);\n            }\n        }\n        _pubsub_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].publish(_utils_js__WEBPACK_IMPORTED_MODULE_3__.TOPICS.todoMoved);\n    }\n\n    changeCurrentProject(projectName) {\n        let project = this.getProjectByName(projectName);\n        if (project) {\n            this.#currentProject = project;\n            this.publish(_utils_js__WEBPACK_IMPORTED_MODULE_3__.TOPICS.currentProjectChanged, this.#currentProject);\n        }\n    }\n\n    isCurrentProjectSpecial() {\n        return this.#currentProject === this.#projects[TodoModel.#specialProjects.today] ||\n            this.#currentProject === this.#projects[TodoModel.#specialProjects.nextSevenDays];\n    }\n\n    get currentProject() {\n        return this.#currentProject;\n    }\n\n    set currentProject(projectName) {\n        let project = this.getProjectByName(projectName);\n        if (project) {\n            this.#currentProject = project;\n            this.publish(_utils_js__WEBPACK_IMPORTED_MODULE_3__.TOPICS.currentProjectChanged, { currentProject: this.#currentProject });\n        }\n    }\n\n    get projects() {\n        return this.#projects;\n    }\n\n    getCheckedTodos() {\n        return this.#currentProject.todos.filter(todo => todo.isChecked);\n    }\n\n    publish(topic, data) {\n        // delegate to the PubSub instance\n        _pubsub_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].publish(topic, data);\n\n    }\n\n\n    getProjectByName(projectName) {\n        return this.#projects.filter(project => project.name === projectName)[0];\n    }\n    /**\n     * Define the first three properties. Make them non-configurable.\n     */\n    #defineProjectsProperties() {\n        Object.defineProperties(this.#projects, {\n            0: {\n                value: new _todo_project_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](\"Inbox\"),\n                writable: true,\n                configurable: false,\n                enumerable: true\n            },\n            1: {\n                value: new _today_project_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"](),\n                writable: true,\n                configurable: false,\n                enumerable: true\n            },\n            2: {\n                value: new _next_seven_days_project_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"](),\n                writable: true,\n                configurable: false,\n                enumerable: true\n            },\n        });\n\n    }\n    /**\n     * @param {String} op an operation in {\"add\", \"remove\"}\n     */\n    updateSpecialProjects(op, dueDate, todoData) {\n        if (dueDate instanceof Date) {\n            if (this.#projects[TodoModel.#specialProjects.today].dateRange.includes(dueDate)) {\n                this.#projects[TodoModel.#specialProjects.today][op](todoData);\n                return this.#projects[TodoModel.#specialProjects.today];\n            }\n            else if (this.#projects[TodoModel.#specialProjects.nextSevenDays].dateRange.includes(dueDate)) {\n                this.#projects[TodoModel.#specialProjects.nextSevenDays][op](todoData);\n                return this.#projects[TodoModel.#specialProjects.nextSevenDays];\n            }\n        }\n    }\n\n    getDefaultPriority() {\n        return _todo_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"].defaultPriority;\n    }\n\n    getTodoById(id) {\n        return this.#currentProject.getTodoById(id);\n    }\n    isSpecialProject(projectName) {\n        return projectName === this.#projects[TodoModel.#specialProjects.today].name ||\n            projectName === this.#projects[TodoModel.#specialProjects.nextSevenDays].name;\n    }\n\n    changeProjectName(projectName, updatedProjectName) {\n        if (!this.getProjectByName(updatedProjectName)) {\n            this.getProjectByName(projectName).name = updatedProjectName;\n            _pubsub_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].publish(_utils_js__WEBPACK_IMPORTED_MODULE_3__.TOPICS.projectNameChanged, { projectName, updatedProjectName });\n        }\n    }\n\n    getCurrentProjectSortName() {\n        return this.#currentProject.getCompareBehaviorName();\n    }\n    static getSpecialProjectsLength(){\n        return Object.keys(TodoModel.#specialProjects).length;\n    }\n}\n\n//# sourceURL=webpack://todo-list/./src/todo-model.js?");

/***/ }),

/***/ "./src/todo-project.js":
/*!*****************************!*\
  !*** ./src/todo-project.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TodoProject)\n/* harmony export */ });\n/* harmony import */ var _compare_behaviors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./compare-behaviors.js */ \"./src/compare-behaviors.js\");\n/* harmony import */ var _todo_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./todo.js */ \"./src/todo.js\");\n\n\n\n\nclass TodoProject {\n    #name;\n    #todos;\n    #compareBehavior;\n\n    constructor(name) {\n        this.#name = name;\n        this.#todos = [];\n        // The default compare behavior between two todos is this project is by priority (from highest to lowest).\n        this.#compareBehavior = new _compare_behaviors_js__WEBPACK_IMPORTED_MODULE_0__.CompareByPriority();\n\n    }\n\n    assign(obj) {\n        if (obj) {\n            this.#name = obj.name;\n            obj.todos.forEach((todo) => {\n                this.#todos.push(new _todo_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]().assign(todo));\n            });\n            this.#compareBehavior = new _compare_behaviors_js__WEBPACK_IMPORTED_MODULE_0__[`CompareBy${obj.compareBehavior}`]();\n        }\n        return this;\n    }\n\n    toJSON() {\n        return {\n            name: this.#name,\n            todos: this.#todos,\n            compareBehavior: this.#compareBehavior.name\n        }\n    }\n\n    add(todo) {\n        // Find todo's appropriate position in this project\n        let todoPosition = this.#searchTodoPosition(todo);\n        // Add the todo in his appropriate position in this project\n        this.#todos.splice(todoPosition, 0, todo);\n        // todo is now contained in this project\n        if (!todo.containingProject) {\n            todo.containingProject = this;\n        }\n\n        return todoPosition;\n\n    }\n\n    remove(id) {\n        let position = this.#getIndexOfTodo(id);\n        if (position > -1) {\n            // Return the removed todo.\n            return { todo: this.#todos.splice(position, 1)[0], position };\n        }\n    }\n\n    sort(sortName) {\n        // TODO replace true with this.#compareBehavior.name !== sortName\n        if (true) {\n            // Get the appropriate compare behavior with respect to the given sortName.\n            let compareBehaviorStr = `CompareBy${sortName}`;\n            // If there exists such compare behavior \n            if (_compare_behaviors_js__WEBPACK_IMPORTED_MODULE_0__[compareBehaviorStr]) {\n                // Set this project compare behavior dynamically to the new compare behavior.\n                this.#compareBehavior = new _compare_behaviors_js__WEBPACK_IMPORTED_MODULE_0__[compareBehaviorStr]();\n                // Sort this project's todos according to the new compare behavior.\n                this.#todos.sort(this.#compareBehavior.compare.bind(this.#compareBehavior));\n                // Indicate that the project was sorted \n                return true;\n\n            }\n        }\n\n\n    }\n\n\n    getTodoById(id) {\n        return this.#todos.find(todo => todo.id == id);\n\n    }\n\n    #getIndexOfTodo(id) {\n        let i = this.#todos.findIndex(todo => todo.id == id);\n        if (i > -1) {\n            return i;\n        }\n    }\n\n    toString() {\n        return this.#name;\n    }\n\n    get name() {\n        return this.#name;\n    }\n    set name(projectName) {\n        this.#name = projectName;\n    }\n\n    get todos() {\n        return this.#todos;\n    }\n\n\n    printTodosByDate() {\n        let str = \"\";\n        for (let todo of this.#todos) {\n            str += \", \" + todo.toDateString();\n        }\n        return str;\n    }\n\n    /**\n     * Search the position of todo in the sorted todos array according to how this project compares his todos.\n     * Using binary search.\n     * Notes:\n     * 1. We are using here the compare behavior of this project since this project's todos are sorted according \n     *    the same compare behavior, so the binary search will return the correct position of todo.\n     * 2. In the while loop, if left > right and \n     *      we finished at left, then it must be that finishedAt (( == left) == todo's length).\n     *      Else if we finished at right then it must be that we previously went left and then right,\n     *      so todo's position is between left and right, therefore we need to return finishedAt + 1 ( == right +1).\n     *      Else finishedAt = mid and mid can be the a valid position for for todo, in terms of the compare behavior.\n     * @param {Todo} todo \n     * @returns The position of todo in the sorted todo's array.\n     */\n\n    #searchTodoPosition(todo) {\n        let left = 0, finishedAt = 0, right = this.#todos.length - 1;\n        let mid, compareResult;\n\n        while (left <= right) {\n            mid = Math.trunc((left + right) / 2);\n            compareResult = this.#compareBehavior.compare(todo, this.#todos[mid]);\n\n            if (compareResult > 0) {\n                finishedAt = left = mid + 1;\n\n            }\n            else if (compareResult < 0) {\n                finishedAt = right = mid - 1;\n            }\n            else {\n                finishedAt = mid;\n                break;\n            }\n        }\n        if (finishedAt === right) {\n            return finishedAt + 1;\n        }\n\n        return finishedAt;\n\n    }\n\n    getCompareBehaviorName() {\n        return this.#compareBehavior.name;\n    }\n\n    \n}\n\n//# sourceURL=webpack://todo-list/./src/todo-project.js?");

/***/ }),

/***/ "./src/todo-storage.js":
/*!*****************************!*\
  !*** ./src/todo-storage.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TodoSorage)\n/* harmony export */ });\n\nclass TodoSorage {\n\n    static setModelState(model){\n        localStorage.setItem(\"model\", JSON.stringify(model));\n    }\n    static getModelState(){\n        return JSON.parse(localStorage.getItem(\"model\"));\n    }\n\n}\n\n\n\n//# sourceURL=webpack://todo-list/./src/todo-storage.js?");

/***/ }),

/***/ "./src/todo-view.js":
/*!**************************!*\
  !*** ./src/todo-view.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TodoView)\n/* harmony export */ });\n/* harmony import */ var _abstract_subscriber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract-subscriber.js */ \"./src/abstract-subscriber.js\");\n/* harmony import */ var _pubsub_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pubsub.js */ \"./src/pubsub.js\");\n/* harmony import */ var _todo_project_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./todo-project.js */ \"./src/todo-project.js\");\n/* harmony import */ var _todo_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./todo.js */ \"./src/todo.js\");\n/* harmony import */ var _date_manager_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./date-manager.js */ \"./src/date-manager.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils.js */ \"./src/utils.js\");\n\n\n\n\n\n//import tippy from \"tippy.js\"\n\n\nclass TodoView extends _abstract_subscriber_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    #todoModel;\n    #todoController;\n\n    #projects;\n    #constantProjects;\n    #currentProject;\n    #customProjects;\n    #addProjectBtn;\n    #addTodoListItem\n    #editTodoForm\n    #editTodoFormContainer\n    #priorityList\n    #projectContent;\n    #projectContentHeader\n\n\n    #hiddenTodo;\n\n    #projectSelectionMenu;\n\n    #todos\n\n\n    constructor(controller, model) {\n        super();\n        this.#todoController = controller;\n        this.#todoModel = model;\n\n\n\n        // this.createTipTools();\n\n    }\n\n    /* createTipTools(){\n         tippy(\".priority-high\", {content: \"High priority\"});\n     }*/\n\n    createView() {\n        this.#projects = document.querySelector(\".nav-projects\");\n        this.#constantProjects = document.querySelector(\".constant-projects\");\n        this.#customProjects = document.querySelector(\".custom-projects\");\n        this.#addProjectBtn = document.querySelector(\".add-project-btn\")\n        this.#projectContent = document.querySelector(\".project-content\");\n        this.#todos = document.querySelector(\".todos\");\n        this.#editTodoForm = this.#todos.querySelector(\".edit-todo-form\");\n        this.#addTodoListItem = this.#todos.querySelector(\".add-todo-list-item\");\n        this.#editTodoFormContainer = this.#todos.querySelector(\".edit-todo-list-item\");\n        this.#priorityList = document.querySelector(\".edit-todo-priorities-list\");\n        this.#projectSelectionMenu = document.querySelector(\".select-projects\");\n        this.#projectContentHeader = document.querySelector(\".project-content-header\");\n\n        this.#currentProject = this.#constantProjects.firstElementChild.nextElementSibling;\n        this.#currentProject.classList.add(\"current-project\");\n        // Don't allow adding todos to today's todo list.\n        // Remove the option to add a todo.\n        this.#toggleAddTodoDisplay(this.#todoModel.isCurrentProjectSpecial());\n        this.#projectContent.querySelector(\"h3\").textContent = this.#todoModel.currentProject.name;\n\n        this.#populateTodos(this.#todoModel.currentProject.todos);\n\n        this.#editTodoForm.querySelector(\".edit-todo-area\").onclick = (event) => {\n            event.preventDefault();\n            event.stopPropagation();\n        };\n\n\n        this.#projectSelectionMenu.add(this.#createOption(\"Inbox\"));\n\n        this.#setSortSelection();\n\n        this.#addListeners();\n    }\n\n    populateProjects(projectsNames) {\n        projectsNames.forEach((projectName) => {this.#customProjects.append(this.#createProjectListItem(projectName));})\n    }\n\n    onProjectSorted(data) {\n\n        this.#setSortSelection(data.sortName);\n        this.#clearCurrentProjectTodos();\n        this.#populateTodos(data.todos);\n\n    }\n\n\n    onProjectRemoved(data) {\n        this.#customProjects.children[data.position].remove();\n        this.#removeProjectOption(data.projectName);\n    }\n\n    /**\n     * Assuming data is the position of the todo to be removed\n     */\n    onTodoRemoved(data) {\n        this.#todos.children[data].remove();\n    }\n\n    #toggleAddTodoDisplay(isCurrentProjectSpecial) {\n\n        if (isCurrentProjectSpecial) {\n            this.#addTodoListItem.style.display = \"none\";\n        }\n        else {\n            this.#addTodoListItem.style.display = \"block\";\n        }\n    }\n    /**\n     * Add a todo list item in his position according to the way todos are sorted in the model\n     * @param {Object} data an object of the form {todo, postion}\n     */\n    onTodoAdded(data) {\n        if (data.todo instanceof _todo_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]) {\n            if (!data.isAddedToAnotherProject) {\n                this.#todos.children[data.position].before(this.#createTodoListItem(data.todo));\n            }\n            else {\n                // TODO  - when you wil l implement todos count in the nav for a project\n                // you will need to get a reference to the project element in the nav.\n            }\n\n        }\n    }\n\n    #createTodoListItem(todo) {\n        let todoListItem = this.#createTodoStructure();\n        this.#injectTodoDetails(todoListItem, todo);\n        return todoListItem;\n    }\n\n    #injectTodoDetails(todoListItem, todo) {\n        todoListItem.dataset.id = todo.id;\n        todoListItem.querySelector(\".todo-list-item-title\").textContent = todo.title;\n        todoListItem.querySelector(\".todo-list-item-date\").textContent = _date_manager_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].toDateString(todo.dueDate);\n        todoListItem.querySelector(\".todo-list-item-priority\").classList.add(this.#getPriorityClass(todo.priority));\n\n    }\n\n    #getPriorityClass(priority) {\n        switch (priority) {\n            case \"High\": return \"priority-high\";\n            case \"Medium\": return \"priority-medium\";\n            case \"Low\": return \"priority-low\";\n        }\n    }\n\n    #createTodoStructure() {\n        let todoListItemTemplate = this.#todos.querySelector(\"template\");\n        return todoListItemTemplate.content.cloneNode(true).children[0];\n\n    }\n    /**\n     * Event delegation to the document.\n     * @param {EventTarget} event click event in side the todos list\n     */\n    onTodosClick(event) {\n        // don't allow any action on the todos list if the form is open.\n        // The user will have to quit the fir in order to take actions on the todos list\n        if (!this.#isEditTodoFormDisplayed()) {\n            // If the user clicked on the delete todo icon then delete the todo\n            if (event.target.tagName === \"I\") {\n                this.#todoController.removeTodo(event.target.closest(\"li\").dataset.id);\n            }\n            //  Else we check if the user clicked on a list item inside the todo list\n\n            else {\n                let todoListItem = this.#getContainingListItem(event.target);\n                if (todoListItem) {\n\n                    /* We split to cases depends on each type of list item: */\n\n                    // If the user wants to add a new todo\n                    if (todoListItem.classList.contains(\"add-todo-list-item\")) {\n                        this.#addTodo();\n\n                    }\n                    // Else if the user wants to expand an existing todo or move a todo to a different project\n                    else {\n                        this.#onTodoClick(todoListItem, event);\n\n                    }\n                }\n            }\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n    }\n\n    #onTodoClick(todoListItem, event) {\n        this.#projectSelectionMenu.style.visibility = \"\";\n\n        let select = event.target.closest(\"select\");\n        if (select) {\n            this.#showMoveTodoOptions(todoListItem);\n        }\n        else {\n            this.#updateTodo(todoListItem);\n        }\n    }\n\n    #showMoveTodoOptions(todoListItem) {\n\n\n    }\n\n    #updateTodo(todoListItem) {\n        let todoProperties = this.#todoController.getTodoProperties(todoListItem.dataset.id);\n\n        if (!todoProperties)\n            return;\n\n        this.#populateEditTodoForm(todoProperties);\n\n        this.#editTodoForm.elements.submit.onclick = function (event) {\n            let title = this.#editTodoForm.elements.title.value?.trim();\n            if (title) {\n                // TODO - the view shouldn't know about Todo. Change this.\n                let updatedTodo = new _todo_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"](title, this.#editTodoForm.elements.description.value,\n                    this.#priorityList.dataset.priority, _date_manager_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].resetHours(this.#editTodoForm.elements.date.valueAsDate))\n\n                this.#todoController.updateTodo(todoListItem.dataset.id, updatedTodo);\n\n            }\n\n            this.#hideEditTodoForm();\n            // TODO - no need to prevent default\n            event.preventDefault();\n            event.stopPropagation();\n\n        }.bind(this);\n\n        this.#editTodoForm.elements.cancel.onclick = function (event) {\n            this.#addTodoListItem.before(this.#editTodoFormContainer);\n            this.#hideEditTodoForm();\n            // TODO this will get back to the less specific classList class that has a flex display\n            // but this line don't looks good.\n            todoListItem.style.display = \"\"\n            event.stopPropagation();\n        }.bind(this);\n\n        todoListItem.after(this.#editTodoFormContainer);\n        todoListItem.style.display = \"none\"\n        this.#hiddenTodo = todoListItem;\n        this.#showEditTodoForm();\n    }\n\n    #populateEditTodoForm(todoProperties) {\n        this.#editTodoForm.elements.title.value = todoProperties.title;\n        this.#editTodoForm.elements.description.value = todoProperties.description;\n        this.#editTodoForm.elements.date.value = _date_manager_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].toInputDateFormat(todoProperties.date);\n        // Highlight the todo's priority in the UI\n        for (let priority of this.#priorityList.children) {\n            if (priority.dataset.priority === todoProperties.priority) {\n                priority.classList.add(\"chosen\");\n                // Save the priority in the dataset of the priority list since\n                // if the user will not choose a priority the the priority will have\n                // the value \"LOW\" next time the user expand this todo, \n                // because after the user submits the form, we set the priority \n                // in the dataset to the default value for priorities, which is the value \"Low\".\n                // \n                this.#priorityList.dataset.priority = todoProperties.priority;\n            }\n        }\n    }\n\n    #createTodoProperties() {\n        let title = this.#editTodoForm.elements.title.value?.trim();\n        if (title) {\n\n            return {\n                title,\n                description: this.#editTodoForm.elements.description.value,\n                priority: this.#priorityList.dataset.priority,\n                date: _date_manager_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].resetHours(this.#editTodoForm.elements.date.valueAsDate)\n            };\n\n        }\n    }\n\n    /**\n     * Add a new todo\n     * \n     */\n    #addTodo() {\n\n        this.#editTodoForm.elements.submit.onclick = function (event) {\n            let todoProperties = this.#createTodoProperties();\n            if (todoProperties) {\n                this.#todoController.addTodo(todoProperties);\n            }\n\n            this.#hideEditTodoForm();\n            event.preventDefault();\n            event.stopPropagation();\n\n        }.bind(this);\n\n\n\n        this.#editTodoForm.elements.cancel.onclick = function (event) {\n            this.#hideEditTodoForm();\n            event.stopPropagation();\n        }.bind(this);\n\n        this.#showEditTodoForm();\n        this.#projectSelectionMenu.style.visibility = \"hidden\";\n\n    }\n\n    #isEditTodoFormDisplayed() {\n        return this.#editTodoFormContainer.style.display != \"none\";\n    }\n    /**\n     * get the priority that the user clicked on and use setPriority closure to set the priority in the caller\n     * @param {Function} setPriority \n     */\n    onPriorityClick() {\n        // Get the priorities list\n        let priorityList = this.#priorityList;\n        // Get the priorities list elements as an array\n        let priorities = Array.from(priorityList.children);\n        // When the user click on a priority it will change color for it and remove color for the other two priorities\n        priorityList.onclick = function (event) {\n            let priority = event.target.closest(\"li\");\n            // Return if the user didn't click on a priority or this priority already marked as chosen\n            if (!priority || priority.classList.contains(\"chosen\"))\n                return;\n\n            let targetIndex = priorities.indexOf(priority);\n            priority.classList.add(\"chosen\");\n            priorities[(targetIndex + 1) % 3].classList.remove(\"chosen\");\n            priorities[(targetIndex + 2) % 3].classList.remove(\"chosen\");\n            priorityList.dataset.priority = priority.dataset.priority;\n\n\n        }\n\n    }\n\n    #clearCurrentProjectTodos() {\n        let element = this.#todos.querySelector(\"template\");\n        while (element.previousElementSibling) {\n            element.previousElementSibling.remove();\n        }\n    }\n\n    // TODO this method is good. Test it When the time is right.\n    #populateTodos(todos) {\n        for (let i = todos.length - 1; i >= 0; i--) {\n            this.#todos.prepend(this.#createTodoListItem(todos[i]));\n        }\n    }\n    /**\n     * Handle the project selection menu when we switch to a different project in the nav.\n     * @param {String} movedFrom the name of the project the user is leaving\n     * @param {String} movedTo  the name of the project the user navigates to\n     */\n    #handleProjectSelectionMenu(movedFrom, movedTo) {\n\n        if (!this.#todoModel.isSpecialProject(movedFrom)) {\n            // Add the project that the user is leaving to the menu, since the user will have \n            // the option to move todos to that project\n            this.#projectSelectionMenu.add(this.#createOption(movedFrom));\n        }\n        if (!this.#todoModel.isSpecialProject(movedTo)) {\n            // Remove the project that the user navigates to from the menu, since there is no point in \n            // moving todos from a project to itself \n            this.#removeProjectOption(movedTo);\n        }\n\n    }\n\n    #removeProjectOption(projectName) {\n        let optionToRemove;\n        for (let option of this.#projectSelectionMenu.options) {\n            if (option.value === projectName) {\n                optionToRemove = option;\n                break;\n            }\n        }\n        if (optionToRemove) {\n            optionToRemove.remove();\n        }\n    }\n\n    #getProjectByName(projectName) {\n        let projects = this.#projects.querySelectorAll(\"li\");\n        for (let project of projects) {\n            if (project.firstElementChild.textContent === projectName) {\n                return project;\n            }\n        }\n    }\n\n    onCurrentProjectChanged(data) {\n        if (data instanceof _todo_project_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]) {\n            this.#handleProjectSelectionMenu(document.querySelector(\"li.current-project > span\").textContent, data.name);\n\n            this.#currentProject.classList.remove(\"current-project\");\n            this.#currentProject = this.#getProjectByName(data.name);\n\n            this.#clearCurrentProjectTodos();\n\n            this.#currentProject.classList.add(\"current-project\");\n\n            this.#projectContent.querySelector(\"h3\").textContent = data.name;\n\n            this.#toggleAddTodoDisplay(this.#todoModel.isCurrentProjectSpecial());\n\n            this.#populateTodos(this.#todoModel.currentProject.todos);\n\n            this.#setSortSelection();\n\n        }\n    }\n\n    #setSortSelection(sortName = this.#todoModel.getCurrentProjectSortName()) {\n        let options = this.#projectContentHeader.querySelector(\".sort-project-menu\").options;\n\n        for (let option of options) {\n            if (option.value === sortName) {\n                option.selected = true;\n            }\n        }\n    }\n\n    onClickChangeCurrentProject(event) {\n        let project = this.#getContainingListItem(event.target);\n        if (project && this.#currentProject !== project) {\n            this.#todoController.changeCurrentProject(project.querySelector(\"span\").textContent);\n        }\n    }\n\n    #getContainingListItem(element) {\n        return element.closest(\"li\");\n    }\n\n    #addListeners() {\n        document.addEventListener(\"click\", this.onDocumentClick.bind(this))\n        this.#addProjectBtn.addEventListener(\"click\", this.onClickAddProject.bind(this));\n        this.#projects.addEventListener(\"click\", this.onClickChangeCurrentProject.bind(this));\n        this.#todos.addEventListener(\"click\", this.onTodosClick.bind(this));\n        this.#priorityList.addEventListener(\"click\", this.onPriorityClick());\n        this.#projectSelectionMenu.addEventListener(\"change\", this.onChangeProjectSelection.bind(this));\n        this.#customProjects.addEventListener(\"click\", this.onCustomProjectsClick.bind(this));\n        this.#projectContentHeader.addEventListener(\"change\", this.onProjectContentHeaderChange.bind(this));\n    }\n\n\n    onProjectContentHeaderChange(event) {\n        let select = event.target.closest(\"select\");\n        if (select && select.classList.contains(\"sort-project-menu\")) {\n            this.#todoController.sortProject(event.target.value);\n        }\n    }\n\n    onCustomProjectsClick(event) {\n        let projectSettings = event.target.closest(\".project-settings\");\n        if (projectSettings) {\n            let projectListItem = event.target.closest(\"li\");\n            let span = event.target.closest(\"span\");\n            if (projectSettings.contains(span)) {\n                if (span.classList.contains(\"edit-project-name\")) {\n                    this.#editProjectName(projectListItem);\n                    // This will prevent from displaying the project's content\n                    // if we are currently displaying other project\n                    event.stopPropagation();\n                }\n                else {\n                    this.#removeProject(projectListItem);\n                }\n            }\n        }\n    }\n\n    onProjectNameChanged(data) {\n        let customProjects = this.#customProjects.querySelectorAll(\"li\");\n        for (let customProject of customProjects) {\n            if (customProject.firstElementChild.textContent === data.projectName) {\n                customProject.firstElementChild.textContent = data.updatedProjectName;\n                if (customProject === this.#currentProject) {\n                    this.#projectContent.querySelector(\"h3\").textContent = data.updatedProjectName;\n                }\n            }\n        }\n    }\n\n    #editProjectName(projectListItem) {\n        let form = document.querySelector(\".one-input-project-form\");\n        let formContainer = this.#attachFormContainer(form, \"\", \"form-container\");\n        let modalCover = this.#createModalCover();\n        form.firstElementChild.textContent = \"Edit project name\";\n\n        form.onsubmit = function (event) {\n            let value = form.elements.text.value;\n            if (value) {\n                this.#todoController.changeProjectName(projectListItem.firstElementChild.textContent, value);\n            }\n            this.#hideModalForm(modalCover, form, formContainer);\n            event.preventDefault();\n            event.stopPropagation();\n        }.bind(this);\n\n        form.cancel.onclick = function (event) {\n            this.#hideModalForm(modalCover, form, formContainer);\n            event.preventDefault();\n            event.stopPropagation();\n        }.bind(this);\n\n        this.#showModalForm(modalCover, form);\n    }\n\n    #removeProject(projectListItem) {\n        let projectName = projectListItem.firstElementChild.textContent;\n        if (window.confirm(`Are you sure you want to remove project \"${projectName}\"?`)) {\n            this.#todoController.removeProject(projectName);\n        }\n    }\n\n    onChangeProjectSelection(event) {\n        if (this.#hiddenTodo) {\n            this.#projectSelectionMenu.form.elements.submit.onclick = this.#projectSelectionMenu.form.elements.cancel.onclick = null;\n            this.#todoController.moveTodoToProject(this.#hiddenTodo.dataset.id, event.target.value);\n        }\n    }\n\n    onTodoMoved() {\n\n        this.#hiddenTodo.style.display = \"\";\n        this.#hiddenTodo = null;\n\n        this.#hideEditTodoForm();\n\n\n    }\n\n    onDocumentClick(event) {\n        let nav = event.target.closest(\".nav-projects\");\n        if (nav) {\n            this.#hideEditTodoForm();\n            // If this condition is true then the user expanded a todo and then clicked on the nav \n            // the todo displayed in this phase is \"none\". But now the form will be closed so we need to display\n            // the hidden todo list item\n            if (this.#hiddenTodo) {\n                this.#hiddenTodo.style.display = \"\";\n                this.#hiddenTodo = null;\n            }\n\n            // This condition will be true if the user expanded a todo and then went to a different project.\n            // in this case we need to put the form container in his original position.\n            if (this.#addTodoListItem.previousElementSibling !== this.#editTodoFormContainer) {\n                this.#addTodoListItem.before(this.#editTodoFormContainer);\n            }\n\n        }\n\n    }\n\n    #showEditTodoForm() {\n        this.#editTodoFormContainer.style.display = \"block\";\n        this.#addTodoListItem.style.display = \"none\";\n        this.#projectContentHeader.querySelector(\".sort-project-menu\").disabled = true;\n    }\n\n    #hideEditTodoForm() {\n        this.#editTodoFormContainer.style.display = \"none\";\n        this.#editTodoForm.reset();\n\n        this.#priorityList.dataset.priority = this.#todoModel.getDefaultPriority();\n        for (let priority of this.#editTodoForm.querySelector(\".edit-todo-priorities-list\").children) {\n            priority.classList.remove(\"chosen\");\n        }\n\n        if (!this.#todoModel.isCurrentProjectSpecial()) {\n            this.#addTodoListItem.style.display = \"block\";\n        }\n\n        this.#projectContentHeader.querySelector(\".sort-project-menu\").disabled = false;\n    }\n\n    #displayTodo(todo) {\n        todo.style.display = \"\";\n    }\n\n    #createOption(projectName) {\n        let option = document.createElement(\"option\");\n        option.value = option.text = projectName;\n        return option;\n\n    }\n\n    onProjectAdded(data) {\n        if (data instanceof _todo_project_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]) {\n            this.#customProjects.append(this.#createProjectListItem(data.name));\n        }\n\n    }\n\n    #createProjectListItem(projectName) {\n        let projectListItem = document.createElement(\"li\");\n        let projectSpan = document.createElement(\"span\");\n        projectSpan.append(projectName);\n        projectListItem.append(projectSpan);\n\n        // Add the settings components for the project\n        let projectSettings = document.querySelector(\"#project-settings-template\").content.cloneNode(true).children[0];\n        projectSettings.style.display = \"none\";\n\n        projectListItem.addEventListener(\"mouseover\", () => {\n            projectSettings.style.display = \"block\";\n        });\n        projectListItem.addEventListener(\"mouseleave\", () => {\n            projectSettings.style.display = \"none\";\n        });\n\n        projectListItem.append(projectSettings);\n\n        projectListItem.classList.add(\"project-list-item\");\n\n        // add the an option with the project name to the select element\n        let option = this.#createOption(projectName);\n        this.#projectSelectionMenu.add(option);\n\n        return projectListItem;\n\n    }\n\n\n\n    onTodoUpdated(data) {\n        console.log(data);\n    }\n    onTodoChecked(data) {\n        console.log(data);\n    }\n    onCheckedTodosRemoved(data) {\n        console.log(data);\n    }\n\n\n    /* on clicks */\n\n    onClickAddProject() {\n\n        let form = document.querySelector(\".one-input-project-form\");\n        let formContainer = this.#attachFormContainer(form, \"\", \"form-container\");\n        let modalCover = this.#createModalCover();\n        form.firstElementChild.textContent = \"Add new project\";\n\n\n        // Get the project name from the form.\n        // Let controller handle logic given the name of the project.\n        // Quit the form and hide the modal cover.\n        form.onsubmit = function (event) {\n            let value = form.elements.text.value;\n            if (value) {\n                this.#todoController.addProject(value);\n            }\n            this.#hideModalForm(modalCover, form, formContainer);\n            event.preventDefault();\n            event.stopPropagation();\n        }.bind(this);\n\n        form.cancel.onclick = function (event) {\n            this.#hideModalForm(modalCover, form, formContainer);\n            event.preventDefault();\n            event.stopPropagation();\n        }.bind(this);\n\n        this.#showModalForm(modalCover, form);\n\n\n    }\n\n    #attachFormContainer(form, formSubject, containerClass) {\n        let formContainer = document.createElement(\"div\");\n        formContainer.classList.add(containerClass);\n\n        form.before(formContainer);\n        formContainer.innerHTML = `<span>${formSubject}</span>`;\n        formContainer.append(form);\n\n        return formContainer;\n    }\n\n    #createModalCover() {\n        let modalCover = document.createElement(\"div\");\n        modalCover.classList.add(\"modal-cover\");\n        return modalCover;\n    }\n\n    #hideModalForm(modalCover, form, formContainer) {\n        // Remove the form container from the DOM and replace it with the form\n        formContainer.replaceWith(form);\n        // Hide the form\n        form.style.display = \"none\";\n        // Remove the modal cover from the DOM and allow scrolling the body\n        modalCover.remove();\n        document.body.overflowY = \"\";\n    }\n\n    #showModalForm(modalCover, form) {\n        this.#handleFocusTrap(modalCover, form);\n        // Add the modal cover to the DOM \n        document.body.append(modalCover);\n        // don't allow scrolling the body\n        document.body.style.overflowY = \"hidden\";\n\n        // Show the form \n        form.style.display = \"block\";\n        form.elements.text.value = \"\";\n        form.elements.text.focus();\n    }\n    /**\n     * Make sure that when inside the form, the natural flow of passing between elements will accur\n     * but when we're on the first form element and we try to go to the previous element using shift+tab\n     * then we will actually go to the lsat element of the form. \n     * Also, handle the symmetric case.\n     * @param {HTMLDivEelement} modalCover \n     * @param {HTMLFormElement} form \n     */\n    #handleFocusTrap(modalCover, form) {\n        let firstElement = form.elements[0];\n        let lastElement = form.elements[form.elements.length - 1];\n\n        lastElement.onkeydown = function (e) {\n            if (e.key == 'Tab' && !e.shiftKey) {\n                firstElement.focus();\n                return false;\n            }\n        };\n\n        firstElement.onkeydown = function (e) {\n            if (e.key == 'Tab' && e.shiftKey) {\n                lastElement.focus();\n                return false;\n            }\n        };\n        // When a click outside the form accurs, the form will not loose focus\n        modalCover.onclick = function () { firstElement.focus() }\n\n    }\n\n    /**\n     * Substribe to all of the topics.\n     */\n    subscribeAll() {\n        // for each topic subscribe with a function who's name is the topic name with a capital first letter\n        // prepended with \"on\"\n        // for example if topic == \"projectAdded\" then onTopic == \"onProjectAdded\"\n        for (let topic in _utils_js__WEBPACK_IMPORTED_MODULE_5__.TOPICS) {\n            let first = topic.charAt(0).toUpperCase();\n            let onTopic = `on${first}${topic.substring(1)}`;\n            this.subscribe(_utils_js__WEBPACK_IMPORTED_MODULE_5__.TOPICS[topic], this[onTopic].bind(this));\n        }\n    }\n\n    subscribe(topic, callback) {\n        _pubsub_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].subscribe(topic, callback);\n    }\n\n    unsubscribe(topic, callback) {\n        _pubsub_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].unsubscribe(topic, callback);\n    }\n\n\n\n\n\n    clickCheckTodo(id) {\n        this.#todoController.checkTodo(id);\n    }\n\n    clickSortProject(sortName) {\n        this.#todoController.sortProject(sortName);\n    }\n\n    clickMoveTodoToProject(todoId, projectName) {\n        this.#todoController.moveTodoToProject(todoId, projectName);\n    }\n\n    clickRemoveCheckedTodos() {\n        this.#todoController.removeCheckedTodos();\n    }\n\n\n\n\n}\n\n\n//# sourceURL=webpack://todo-list/./src/todo-view.js?");

/***/ }),

/***/ "./src/todo.js":
/*!*********************!*\
  !*** ./src/todo.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Todo)\n/* harmony export */ });\n/* harmony import */ var _date_manager_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./date-manager.js */ \"./src/date-manager.js\");\n\n\nclass Todo {\n    #id\n    #title;\n    #description;\n    #dueDate;\n    #priority\n    #isChecked;\n    #containingProject;\n\n    static #priorities = { Low: 1, Medium: 2, High: 3 };\n    static #defaultPriority = \"Low\";\n    // TODO - encapsulate this\n    static #runNum = 0;\n    static #fetchUniqueId() {\n        return Todo.#runNum++;\n    }\n\n    constructor(title, description, priority = Todo.#defaultPriority, dueDate) {\n        this.#id = Todo.#fetchUniqueId();\n        this.#title = title;\n        this.#description = description;\n        this.#dueDate = _date_manager_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getProperTodoDate(dueDate);\n        this.#priority = priority;\n        this.#isChecked = false;\n    }\n\n    assign(obj) {\n        if (obj) {\n            this.#id = obj.id;\n            this.#title = obj.title;\n            this.#description = obj.description;\n            this.#dueDate = _date_manager_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getProperTodoDate(obj.dueDate);\n            this.#priority = obj.priority;\n            this.#isChecked = obj.isChecked;\n        }\n        return this;\n\n    }\n\n    toJSON() {\n        return {\n            id: this.#id,\n            title: this.#title,\n            description: this.#description,\n            dueDate: this.#dueDate,\n            priority: this.#priority,\n            isChecked: this.#isChecked,\n\n        }\n    }\n\n    get title() {\n        return this.#title;\n    }\n    set title(title) {\n        this.#title = title;\n    }\n\n    get description() {\n        return this.#description;\n    }\n    set description(description) {\n        this.#description = description;\n    }\n    get dueDate() {\n        return this.#dueDate;\n    }\n    set dueDate(dueDate) {\n        if (!dueDate instanceof Date || dueDate !== \"No Date\")\n            throw new Error(\"dueDate must be a Date object or equals to the string 'No Date'.\");\n\n        dueDate.setHours(0, 0, 0, 0);\n        this.#dueDate = dueDate;\n    }\n\n    get priority() {\n        return this.#priority;\n    }\n    set priority(priority) {\n        if (priority in Object.keys(Todo.#priorities)) {\n            this.#priority = priority;\n        }\n    }\n\n    get isChecked() {\n        return this.#isChecked;\n    }\n    set isChecked(isChecked) {\n        this.#isChecked = isChecked;\n    }\n\n    get containingProject() {\n        return this.#containingProject;\n    }\n    set containingProject(containingProject) {\n        this.#containingProject = containingProject;\n    }\n\n    get id() {\n        return this.#id;\n    }\n\n    static get priorities() {\n        return this.#priorities;\n    }\n\n    valueOf() {\n        return Todo.#priorities[this.#priority];\n    }\n\n    toString() {\n        return this.#priority;\n    }\n    toDateString() {\n        if (this.#dueDate instanceof Date) {\n            return this.#dueDate.toLocaleDateString();\n        }\n\n        return this.#dueDate;\n    }\n    static get defaultPriority() {\n        return Todo.#defaultPriority;\n    }\n}\n\n//# sourceURL=webpack://todo-list/./src/todo.js?");

/***/ }),

/***/ "./src/utils.js":
/*!**********************!*\
  !*** ./src/utils.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TOPICS\": () => (/* binding */ TOPICS)\n/* harmony export */ });\nconst TOPICS = {\n    projectAdded: \"PROJECT ADDED\",\n    projectRemoved: \"PROJECT REMOVED\",\n    projectSorted: \"PROJECT SORTED\",\n    projectNameChanged: \"PROJECT NAME CHANGED\",\n    todoAdded: \"TODO ADDED\",\n    todoRemoved: \"TODO REMOVED\",\n    todoUpdated: \"TODO UPDATED\",\n    todoChecked: \"TODO CHECKED\",\n    checkedTodosRemoved: \"CHECKED TODOS REMOVED\",\n    currentProjectChanged: \"CURRENT PROJECT CHANGED\",\n    todoMoved: \"TODO MOVED\",\n}\n\n\n\n//# sourceURL=webpack://todo-list/./src/utils.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;